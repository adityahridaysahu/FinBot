variables:
  DOCKER_REGISTRY: 239065919983.dkr.ecr.us-east-1.amazonaws.com
  APP_NAME: chatbotfrontend
   # DOCKER_HOST: tcp://docker:2375\
  TAG: "$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID"
  AWS_DEFAULT_REGION: us-east-1

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

central:       # This job runs in the build stage, which runs first.
  stage: build
  services:
    - name: "docker:dind"
  before_script:
    - aws --version   
    - docker --version
  tags:
    - aws
  script:
     - whoami
     - aws --version
     - echo "Buildiung Docker Image..."
     - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 239065919983.dkr.ecr.us-east-1.amazonaws.com 
    #  - docker build -t $DOCKER_REGISTRY/$APP_NAME:central_new -f central.DockerFile .
    #  - docker tag $DOCKER_REGISTRY/$APP_NAME:central_new $DOCKER_REGISTRY/$APP_NAME:latest
    #  - docker push $DOCKER_REGISTRY/$APP_NAME:central_new
     - echo "Build Complete !"

convo:
  stage: build
  services:
    - name: "docker:dind"
  before_script:
    # - sudo ls /root
    # - amazon-linux-extras install docker
    # - aws --version   
    # - docker --version
  tags:
    - aws
  script:
     - whoami
     - aws --version
     - echo "Buildiung Docker Image..."
     - aws ecr get-login-password --region us-east-1 |  docker login --username AWS --password-stdin $DOCKER_REGISTRY 
    #  - docker build -t $DOCKER_REGISTRY/$APP_NAME:convo_new -f convo.DockerFile .
    #  - docker tag $DOCKER_REGISTRY/$APP_NAME:convo_new $DOCKER_REGISTRY/$APP_NAME:latest
    #  - docker push $DOCKER_REGISTRY/$APP_NAME:convo_new
     - echo "Build Complete !"

bonds:
  stage: build
  services:
    - name: "docker:dind"
  before_script:
    # - sudo ls /root
    # - amazon-linux-extras install docker
    # - aws --version   
    # - docker --version
  tags:
    - aws
  script:
     - whoami
     - aws --version
     - echo "Buildiung Docker Image..."
     - aws ecr get-login-password --region us-east-1 |  docker login --username AWS --password-stdin $DOCKER_REGISTRY 
    #  - docker build -t $DOCKER_REGISTRY/$APP_NAME:bonds_new -f bonds.DockerFile .
    #  - docker tag $DOCKER_REGISTRY/$APP_NAME:bonds_new $DOCKER_REGISTRY/$APP_NAME:latest
    #  - docker push $DOCKER_REGISTRY/$APP_NAME:bonds_new 
     - echo "Build Complete !"

global:
    stage: build
    services:
      - name: "docker:dind"
    before_script:
      # - sudo ls /root
      # - amazon-linux-extras install docker
      # - aws --version   
      # - docker --version
    tags:
      - aws
    script:
      - whoami
      - aws --version
      - echo "Buildiung Docker Image..."
      - aws ecr get-login-password --region us-east-1 |  docker login --username AWS --password-stdin $DOCKER_REGISTRY 
      # - docker build -t $DOCKER_REGISTRY/$APP_NAME:global_new -f global.DockerFile .
      # - docker tag $DOCKER_REGISTRY/$APP_NAME:global_new $DOCKER_REGISTRY/$APP_NAME:latest
      # - docker push $DOCKER_REGISTRY/$APP_NAME:global_new
      - echo "Build Complete !"


   
unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  tags:
    - aws
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 1
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  tags:
    - aws
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 1
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  tags:
    - aws
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
    - echo $hostname


selenium-test:
  stage: test
  tags:
    - aws
  variables:
    CHROMEDRIVER_VERSION: "96.0.4664.45"  # Specify the desired ChromeDriver version
    FRONTEND_LINK: "http://a9cb844d7ff8b425585ca81eba804e10-1609975628.us-east-1.elb.amazonaws.com/"

  script:
    - pip3 install webdriver-manager
    - cd tests/
    - python3 integration_selenium.py --front ${FRONTEND_LINK}
