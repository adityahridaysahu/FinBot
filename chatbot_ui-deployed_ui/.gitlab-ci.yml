variables:
  DOCKER_REGISTRY: 239065919983.dkr.ecr.us-east-1.amazonaws.com
  APP_NAME: chatbotfrontend
  # DOCKER_HOST: tcp://docker:2375\
  # TAG: "$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID"
  TAG: frontend-pipeline
  AWS_DEFAULT_REGION: us-east-1


stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy
  - analyze


build-job:
  stage: build
  services:
    - name: "docker:dind"
  before_script:
    - apt-get update -y && apt-get install -y awscli
  tags:
    - aws
  script:
     - whoami
     - aws --version
     - echo "Buildiung Docker Image..."
     - aws ecr get-login-password --region us-east-1 |  docker login --username AWS --password-stdin $DOCKER_REGISTRY 
     - docker build -t $DOCKER_REGISTRY/$APP_NAME:$TAG .
     - docker tag $DOCKER_REGISTRY/$APP_NAME:$TAG 239065919983.dkr.ecr.us-east-1.amazonaws.com/chatbotfrontend:$TAG
     - docker push $DOCKER_REGISTRY/$APP_NAME:$TAG 
     - echo "Build Complete !"


    
  

unit-test-job:   # This job runs in the test stage.
  stage: test
  image: $DOCKER_REGISTRY/$APP_NAME:$TAG
  tags:
    - aws
  before_script:
  - apt-get update -y && apt-get install -y awscli nodejs npm
  script:
    - echo "Running unit tests..."
    - npm install
    - npm test
  artifacts:
    paths:
      - coverage/
    # - sleep 60
    # - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   tags: 
#     - aws
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  tags: 
    - aws
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
analyze:sonar:
  stage: analyze
  tags:
    - aws
  image:
    name: sonarsource/sonar-scanner-cli:4.5
    entrypoint: [""]
  variables:
    # Defines the location of the analysis task cache
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    # Shallow cloning needs to be disabled.
    # See https://docs.sonarqube.org/latest/analysis/gitlab-cicd/.
    GIT_DEPTH: 0
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  before_script:
    - apt-get update -y && apt-get install -y unzip
    - curl -LsS "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.5.0.2216.zip" -o "sonar-scanner.zip"
    - unzip -q "sonar-scanner.zip"
    - rm "sonar-scanner.zip"
    - mv "sonar-scanner-4.5.0.2216" "${CI_PROJECT_DIR}/sonar-scanner"
    - ln -sf "${CI_PROJECT_DIR}/sonar-scanner/bin/sonar-scanner" "${CI_PROJECT_DIR}/sonar-scanner/sonar-scanner"
    - export PATH="${CI_PROJECT_DIR}/sonar-scanner:${PATH}"
  script:
    - sonar-scanner
  rules:
    # SonarQube Community Edition only supports analyzing a single branch.
    # So only run on main.
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success
